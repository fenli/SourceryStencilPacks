// swiftlint:disable line_length
// swiftlint:disable variable_name

import Foundation
import CommonCore
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#elseif os(OSX)
import AppKit
#endif

#if DEBUG
{% for import in argument.autoMockableImports %}
import {{ import }}
{% endfor %}

{% for import in argument.autoMockableTestableImports %}
@testable import {{ import }}
{% endfor %}

{% macro randomValue variable %}{% if variable|annotated:"randomValue" %}{{ '"' if variable.typeName.name|replace:"?","" == "String" }}{{ variable.annotations.randomValue }}{{ '"' if variable.typeName.name|replace:"?","" }}{% else %}{{ variable.typeName.name | replace:"?","" }}.random(){% endif %}{% endmacro %}

{% for type in types.structs where type|annotated:"AutoRandomizable" %}
extension {{ type.name }} {
    static func random() -> {{ type.name | replace:"?","" }} {
        return {{ type.name }}(
            {% for variable in type.variables %}{{ variable.name }}: {% call randomValue variable %}{% if not forloop.last %},{% endif %}
            {% endfor %}
        )
    }
}
{% endfor %}

{% for type in types.enums where type|annotated:"AutoRandomizable" %}
extension {{ type.name }} {
    static func random() -> {{ type.name }} {
        let cases: [{{ type.name }}] = [
            {% for c in type.cases %}
            {% if c.associatedValues.count == 0 %}
            .{{ c.name }}
            {% else %}
            .{{ c.name }}(
                {% for av in c.associatedValues %}
                {{ av.localName }}: {% call randomValue av %}{% if not forloop.last %}, {% endif %}
                {% endfor %}
            ){% endif %}{% if not forloop.last %},{% endif %}
            {% endfor %}
        ]
        return cases.randomElement()!
    }
}
{% endfor %}

#endif
